@{
    ViewBag.Title = "About";
    
    List<string> toWhom = ViewBag.ToWhom as List<string>;
    List<string> description = ViewBag.Description as List<string>;
}


<div class="modal fade" id="assignItemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Assign item</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <h4 id="assignItem" style="color:red;">Assigning Router</h4>
                <hr />
                <div class="form-group">
                    <div class="input-icon">
                        <i class="fa fa-tasks font-green" aria-hidden="true"></i>
                        <input id="assignQuantity" type="number" class="form-control" placeholder="Quantity">
                    </div>
                </div>
                <div class="form-group">
                    <label>Status</label>
                    <select id="assignStatus" class="form-control">
                        <option value="1">In Stock</option>
                        <option value="2">Out of Stock</option>
                        <option value="3">Out of Service</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>location In Stock</label>
                    <select id="locationInStock" class="form-control">
                    </select>
                </div>

                <div class="form-group">
                    <label>ToWhom</label>
                    <input id="toWhom" type="text" class="form-control" placeholder="To Whom" />
                </div>
                <div class="form-group">
                    <label>Description</label>
                    <textarea id="assignDescription" class="form-control" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button id="assignItem" type="button" class="btn btn-primary">Assign</button>
            </div>
        </div>
    </div>
</div>


<div class="page-content-wrapper">
    <div class="page-content">

        @Html.Partial("_ThemeColors")

        <h1 class="page-title"> Transaction </h1>
        <div class="page-bar">
            <ul class="page-breadcrumb">
                <li>
                    <a href="@Url.Action("Transactions","Home")">Items</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <span>Check Items Out of Stock</span>
                </li>
            </ul>
        </div>

        @{ Html.RenderAction("CategoriesPartial", "Home", new { query = "IN" }); }

    </div>
</div>


<script type="text/javascript">

    var selectedItems = [];

    $(document).ready(function () {
        transactionsActive();
        $('#assignActionContainer').show();
    });

    $(document).on('click', '#assignActionSelector', function () {
        console.log('open box');
        selectedItems = [];

        $('#itemsTable tbody label input:checked').each(function () {
            var item = {
                Name: $(this).attr('data-Name'),
                AvailabilityStatusID: $(this).attr('data-AvailabilityStatusID'),
                ItemStatusID: $(this).attr('data-ItemStatusID'),
                ExpiryDate: $(this).attr('data-ExpiryDate'),
                LocationInStock: $(this).attr('data-LocationInStock'),
                ReceivedOn: $(this).attr('data-ReceivedOn'),
                Description: $(this).attr('data-Description'),
                UnitID: $(this).attr('data-UnitID'),
                UnitAmount: $(this).attr('data-UnitAmount')
            };

            selectedItems.push(item);

            var html = '';
            var locationInStock = $(this).attr('data-LocationInStock').split(',');
            $.each(locationInStock, function (index, value) {
                console.log(value);
                console.log(value.replace(/\(.*?\)/, '').replace('(', '').replace(')', ''));
                var itemLocation = value.replace(/\(.*?\)/, '').replace('(', '').replace(')', '');
                html += '<option value="' + itemLocation + '">' + itemLocation + '</option>';
            });

            $('#locationInStock').html('');
            $('#locationInStock').append(html);
        });



        if (selectedItems.length > 1) {
            $('#assignQuantity').val('1');
            $('#assignQuantity').prop('disabled', true);
        } else
        {
            $('#assignQuantity').val('');
            $('#assignQuantity').prop('disabled', false);
        }
    });

    $(document).on('click', '#assignItem', function () {
        console.log('assign item');
        selectedItems = JSON.stringify(selectedItems);
        console.log(selectedItems);

        $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            url: "@Url.Action("AssignItems","Home")?quantity=" + $('#assignQuantity').val()
                + '&AvailabilityStatusID=' + $('#assignStatus').val()
                + '&LocationInStock=' + $('#locationInStock').val()
                + '&Description=' + $('#assignDescription').val()
                + '&ToWhom=' + $('#toWhom').val(),
            data: selectedItems,
            success: function (response) {
                $('#assignItemModal').modal('hide');
                refreshItemsTable();
            }
        });

    });

    function refreshItemsTable() {
        $.ajax({
            url: '@Url.Action("ItemsPartialDefault", "Home")?query=IN',
            type: "POST",
            success: function (data) {
                $('#itemsPartialView').show();
                $('#itemsPartialView').html(data);
                $('html, body').animate({
                    scrollTop: $("#itemsPartialView").offset().top
                }, 2000);
                $('#assignActionContainer').show();
            }
        });
    }

</script>


@*Autocomplete input*@
<script type="text/javascript">

    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a child of the autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }

    /*An array containing all the country names in the world:*/
    var toWhom = @Html.Raw(Json.Encode(toWhom));
    var description = @Html.Raw(Json.Encode(description));

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("toWhom"), toWhom);
    autocomplete(document.getElementById("assignDescription"), description);

</script>