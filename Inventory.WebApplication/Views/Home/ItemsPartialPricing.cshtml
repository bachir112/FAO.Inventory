@using Inventory.DataObjects.DTO
@using Inventory.WebApplication.Global
@model List<ItemsGroupedDTO>

@{
    Layout = null;
}

<div class="col-md-12">
    <div>
        <span class="setPriceForItem" style="cursor:pointer; color:#36c6d3; font-weight:bold">@Translation.GetStringValue("Set")</span>
    </div>
    <div class="portlet light bordered">
        <div class="portlet-body">
            <table id="itemsTable" class="table table-striped table-bordered table-hover table-checkable order-column">
                <thead>
                    <tr>
                        <th><input name="select_all" value="1" type="checkbox"></th>
                        <th> @Translation.GetStringValue("School") </th>
                        <th> @Translation.GetStringValue("ItemName") </th>
                        <th> @Translation.GetStringValue("SerialCode") </th>
                        <th> @Translation.GetStringValue("Supplier") </th>
                        <th> @Translation.GetStringValue("Price") </th>
                        <th> @Translation.GetStringValue("MaintenanceAmount") </th>
                        <th> @Translation.GetStringValue("ExpiryDate") </th>
                        <th> @Translation.GetStringValue("Quantity") </th>
                        <th> @Translation.GetStringValue("Amount") </th>
                        <th> @Translation.GetStringValue("ReceivedOn") </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (ItemsGroupedDTO item in Model)
                        {
                            string AvailabilityStatusColor = string.Empty;
                            switch (item.AvailabilityStatusID)
                            {
                                case 1:
                                    AvailabilityStatusColor = "success";
                                    break;
                                case 2:
                                    AvailabilityStatusColor = "danger";
                                    break;
                                case 3:
                                    AvailabilityStatusColor = "warning";
                                    break;
                                default:
                                    AvailabilityStatusColor = "default";
                                    break;
                            }

                            string price = "";
                            string rowColor = "";
                            if(item.Price == null)
                            {
                                rowColor = "color:red;";
                                price = "Not set";
                            }
                            else
                            {
                                price = item.Price.ToString() + " L.L.";
                            }

                            string maintenancePrice = string.Empty;
                            if(item.MaintenancePrice != null)
                            {
                                maintenancePrice = item.MaintenancePrice + "L.L.";
                            }

                            <tr style="@rowColor" class="odd gradeX">
                                <td style="text-align:center;">
                                    @item.ItemsIDs
                                    @*<span class="setPriceForItem"
                                        style="cursor:pointer; color:#36c6d3; font-weight:bold"
                                        data-ItemName="@item.Name"
                                        data-ItemAmount="@item.Quantity"
                                        data-itemsIDs="@item.ItemsIDs">@Translation.GetStringValue("Set")</span>*@
                                </td>
                                <td>
                                    <span class="">@item.SchoolName</span>
                                </td>
                                <td>
                                    <span class="english">@item.Name</span>
                                    <span class="arabic">@item.Name_Arabic</span>
                                </td>
                                <td>
                                    @((item.Name.Count() > 2 ? item.Name.Substring(0,3) : item.Name) + item.ItemsIDs)
                                </td>
                                <td>
                                    @item.Supplier
                                </td>
                                <td class="price">
                                    @(price)
                                </td>
                                <td>
                                    @(maintenancePrice)
                                </td>
                                <td>
                                    @(item.ExpiryDate?.ToString("dd-MMM-yyyy"))
                                </td>
                                <td>
                                    @item.Quantity
                                </td>
                                <td>
                                    @item.UnitAmount @item.Unit
                                </td>
                                <td>
                                    @item.ReceivedOn
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {

        //var table = $('#itemsTable');


        //var cookieVal = $.cookie("language");
        
        //if (cookieVal == 'arabic') {
            
        //    var oTable = table.dataTable({
        //        "language": {
        //            "aria": {
        //                "sortAscending": ": activate to sort column ascending",
        //                "sortDescending": ": activate to sort column descending"
        //            },
        //            "emptyTable": "لا يوجد",
        //            "info": "عرض _START_ الى _END_ من _TOTAL_ ",
        //            "infoEmpty": "لا يوجد",
        //            "infoFiltered": "(filtered1 من _MAX_ العدد)",
        //            "lengthMenu": "_MENU_ العدد",
        //            "search": "بحث:",
        //            "zeroRecords": "لا يوجد"
        //        },
        //        "order": [
        //            [0, 'asc']
        //        ],
        //        "lengthMenu": [
        //            [5, 10, 15, 20, -1],
        //            [5, 10, 15, 20, "كل"] // change per page values here
        //        ],
        //        "pageLength": 10,
        //        "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable
        //        buttons: [
        //            {
        //                extend: 'print',
        //                className: 'btn dark btn-outline',
        //                message: '',
        //                customize: function (win)
        //                {
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;"><img src="http://198.71.63.89:2243/Images/logo/ministry-logo.jpg" /></h2>');
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;">الجمهورية اللبنانية</h2>');
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;">وزارة الزراعة</h2>');
        //                    $(win.document.body).find('table').addClass('compact').css('font-size', 'inherit');
        //                }
        //            },
        //            { extend: 'pdf', className: 'btn green btn-outline' },
        //            'selectAll',
        //            'selectNone'
        //            //{ extend: 'excel', className: 'btn yellow btn-outline ' }
        //        ]
        //        //,
        //        //responsive: true
        //    });

        //} 
        //else {
            
        //    var oTable = table.dataTable({
        //        "language": {
        //            "aria": {
        //                "sortAscending": ": activate to sort column ascending",
        //                "sortDescending": ": activate to sort column descending"
        //            },
        //            "emptyTable": "No data available in table",
        //            "info": "Showing _START_ to _END_ of _TOTAL_ entries",
        //            "infoEmpty": "No entries found",
        //            "infoFiltered": "(filtered1 from _MAX_ total entries)",
        //            "lengthMenu": "_MENU_ entries",
        //            "search": "Search:",
        //            "zeroRecords": "No matching records found"
        //        },
        //        "order": [
        //            [0, 'asc']
        //        ],
        //        "lengthMenu": [
        //            [5, 10, 15, 20, -1],
        //            [5, 10, 15, 20, "All"] // change per page values here
        //        ],
        //        "pageLength": 10,
        //        "dom": "<'row' <'col-md-12'B>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable
        //        buttons: [
        //            {
        //                extend: 'print',
        //                className: 'btn dark btn-outline',
        //                message: '',
        //                customize: function (win)
        //                {
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;"><img src="http://198.71.63.89:2243/Images/logo/ministry-logo.jpg" /></h2>');
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;">الجمهورية اللبنانية</h2>');
        //                    $(win.document.body).css('font-size', '10pt').prepend('<h2 style="text-align:right;width:100%;">وزارة الزراعة</h2>');
        //                    $(win.document.body).find('table').addClass('compact').css('font-size', 'inherit');
        //                }
        //            },
        //            { extend: 'pdf', className: 'btn green btn-outline' },
        //            'selectAll',
        //            'selectNone'
        //            //{ extend: 'excel', className: 'btn yellow btn-outline ' }
        //        ]
        //        //,
        //        //responsive: true
        //    });


        //}


    });

</script>


<script>

    function searchItems() {
        var categoryID = $('#categories').val(); 
        var fromDate = $('#fromDate').val(); 
        var toDate = $('#toDate').val(); 

        $.ajax({
            url: '@Url.Action("ItemsPartialPricing", "Home")',
            data: { categoryID: categoryID, fromDate: fromDate, toDate: toDate },
            type: "POST",
            success: function (data) {
                $('#itemsPartialView').show();
                $('#itemsPartialView').html(data);
                $('html, body').animate({
                    scrollTop: $("#itemsPartialView").offset().top
                }, 2000);
            }
        });
    }

</script>


<script>

    function updateDataTableSelectAllCtrl(table) {
        var $table = table.table().node();
        var $chkbox_all = $('tbody input[type="checkbox"]', $table);
        var $chkbox_checked = $('tbody input[type="checkbox"]:checked', $table);
        var chkbox_select_all = $('thead input[name="select_all"]', $table).get(0);

        // If none of the checkboxes are checked
        if ($chkbox_checked.length === 0) {
            chkbox_select_all.checked = false;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If all of the checkboxes are checked
        } else if ($chkbox_checked.length === $chkbox_all.length) {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = false;
            }

            // If some of the checkboxes are checked
        } else {
            chkbox_select_all.checked = true;
            if ('indeterminate' in chkbox_select_all) {
                chkbox_select_all.indeterminate = true;
            }
        }
    }


    $(document).ready(function () {
        var rows_selected = [];
        // Array holding selected row IDs
        var table = $('#itemsTable').DataTable({
            'columnDefs': [{
                'targets': 0,
                'searchable': false,
                'orderable': false,
                'width': '1%',
                'className': 'dt-body-center',
                'render': function (data, type, full, meta) {
                    return '<input type="checkbox">';
                }
            }],
            'order': [1, 'asc'],
            'rowCallback': function (row, data, dataIndex) {
                // Get row ID
                var rowId = data[0];

                // If row ID is in the list of selected row IDs
                if ($.inArray(rowId, rows_selected) !== -1) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).addClass('selected');
                }
            }
        });

        // Handle click on checkbox
        $('#itemsTable tbody').on('click', 'input[type="checkbox"]', function (e) {
            var $row = $(this).closest('tr');

            // Get row data
            var data = table.row($row).data();

            console.log(data);

            // Get row ID
            var rowId = data[0];

            // Determine whether row ID is in the list of selected row IDs
            var index = $.inArray(rowId, rows_selected);

            // If checkbox is checked and row ID is not in list of selected row IDs
            if (this.checked && index === -1) {
                rows_selected.push(rowId);

                // Otherwise, if checkbox is not checked and row ID is in list of selected row IDs
            } else if (!this.checked && index !== -1) {
                rows_selected.splice(index, 1);
            }

            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }

            console.log(rows_selected);

            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(table);

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle click on table cells with checkboxes
        $('#itemsTable').on('click', 'tbody td, thead th:first-child', function (e) {
            $(this).parent().find('input[type="checkbox"]').trigger('click');
        });

        // Handle click on "Select all" control
        $('thead input[name="select_all"]', table.table().container()).on('click', function (e) {
            if (this.checked) {
                $('#itemsTable tbody input[type="checkbox"]:not(:checked)').trigger('click');
            } else {
                $('#itemsTable tbody input[type="checkbox"]:checked').trigger('click');
            }

            // Prevent click event from propagating to parent
            e.stopPropagation();
        });

        // Handle table draw event
        table.on('draw', function () {
            // Update state of "Select all" control
            updateDataTableSelectAllCtrl(table);
        });

        $('.setPriceForItem').on('click', function () {
            //console.log('CLICKED');
            //console.log(rows_selected);
            //var itemIDsList = [];
            //$.each(rows_selected, function (index, rowId) {
            //    var itemID = $(this).attr('data-ItemsIDs');
            //    itemIDsList.push(itemID);
            //});

            var itemName = $(this).attr('data-ItemName');
            var itemsIDs = rows_selected;
            maxAllowed = $(this).attr('data-ItemAmount');

            $('#assignItemName').text('Price for ' + itemName);
            $('#assignItemPrice').attr('data-ItemsIDs', itemsIDs);

            $('#itemPriceModal').modal('show');
        });

        // Handle form submission event
        //$('#frm-example').on('submit', function (e) {
        //    var form = this;

        //    // Iterate over all selected checkboxes
        //    $.each(rows_selected, function (index, rowId) {
        //        // Create a hidden element
        //        $(form).append(
        //            $('<input>')
        //                .attr('type', 'hidden')
        //                .attr('name', 'id[]')
        //                .val(rowId)
        //        );
        //    });

        //    // FOR DEMONSTRATION ONLY

        //    // Output form data to a console
        //    $('#example-console').text($(form).serialize());
        //    console.log("Form submission", $(form).serialize());

        //    // Remove added elements
        //    $('input[name="id\[\]"]', form).remove();

        //    // Prevent actual form submission
        //    e.preventDefault();
        //});

    });

    //$(document).on('click', '.setPriceForItem', function () {
    //    console.log('CLICKED');
    //    console.log(rows_selected);
    //    var itemIDsList = [];
    //    $.each(rows_selected, function (index, rowId) {
    //        var itemID = $(this).attr('data-ItemsIDs');
    //        itemIDsList.push(itemID);
    //    });

    //    var itemName = $(this).attr('data-ItemName');
    //    var itemsIDs = itemIDsList.join(',');
    //    maxAllowed = $(this).attr('data-ItemAmount');

    //    $('#assignItemName').text('Price for ' + itemName);
    //    $('#assignItemPrice').attr('data-ItemsIDs', itemsIDs);

    //    $('#itemPriceModal').modal('show');
    //});
</script>