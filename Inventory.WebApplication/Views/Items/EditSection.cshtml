@using Inventory.DataObjects.DTO
@using Inventory.DataObjects.EDM
@using Inventory.WebApplication.Global

@model Inventory.DataObjects.EDM.Item

@{
    ViewBag.Title = "EditSection";
    List<CategoryDTO> categoriesList = ViewBag.CategoriesList as List<CategoryDTO>;
    List<Supplier> suppliersList = ViewBag.SuppliersList as List<Supplier>;
    List<AvailabilityStatu> availabilityStatusList = ViewBag.AvailabilityStatusList as List<AvailabilityStatu>;
    List<ItemStatu> itemStatusList = ViewBag.ItemStatusList as List<ItemStatu>;
    List<Unit> unitList = ViewBag.UnitList as List<Unit>;
    List<string> locationInStock = ViewBag.LocationInStock as List<string>;
    List<string> itemDescription = ViewBag.ItemDescription as List<string>;
}


<style>
    #editActionContainer {
        display: block !important;
    }
</style>

<div class="modal fade" id="deleteItemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" style="color:red;" id="exampleModalLabel">@Translation.GetStringValue("Delete")</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    @Translation.GetStringValue("DeleteQuantity")
                    <input id="quantityToDelete" class="form-control" type="number" value="1" readonly placeholder="@Translation.GetStringValue("Quantity")" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@Translation.GetStringValue("Cancel")</button>
                <button id="deleteAllItemButton" type="button" class="btn btn-danger deleteItems" style="display:none;">@Translation.GetStringValue("Delete")</button>
            </div>
        </div>
    </div>
</div>


<div class="page-content-wrapper">
    <div class="page-content">

        @Html.Partial("_ThemeColors")

        <h1 class="page-title"> @Translation.GetStringValue("Items") </h1>
        <div class="page-bar">
            <ul class="page-breadcrumb">
                <li>
                    <a href="@Url.Action("Index","Home")">@Translation.GetStringValue("Items")</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <span> @Translation.GetStringValue("DeleteItemsFromStock") </span>
                </li>
            </ul>
        </div>

        @{ Html.RenderAction("CategoriesPartial", "Home"); }

    </div>
</div>

<script type="text/javascript">

    var maxAllowed = 0;

    $(document).ready(function () {

        $('#itemsInCategory').select2({
            placeholder: "Select Item"
        });
        $('#availabilityStatus').select2();
        $('#itemStatusID').select2();
        $('#supplierID').select2();
        $('#unitID').select2();
        $('#categoryID').select2();

        $('#unitID').change(function () {

            var unitValue = $(this).val();
            if (unitValue != 1) {
                $('#quantityContainer').show();
            } else {
                $('#quantityContainer').hide();
            }

        });

        $(document).on('click', '#deleteActionSelector', function () {

            $('#itemsTable tbody label input:checked').each(function () {
                var selectedIDs = $(this).attr('data-itemsIDs');
                var ID = selectedIDs.split(',')[0];
                $('#deleteItemButton').attr('data-SelectedIDs', ID);
            });

            $('#deleteItemButton').show();
            $('#deleteAllItemButton').hide();
        });

        $(document).on('click', '#batchDeletedItemActionSelector', function () {

            $('#itemsTable tbody label input:checked').each(function () {
                var selectedIDs = $(this).attr('data-itemsIDs');
                $('#deleteAllItemButton').attr('data-SelectedIDs', selectedIDs);

                maxAllowed = $(this).attr('data-ItemAmount');
            });

            $('#deleteItemButton').hide();
            $('#deleteAllItemButton').show();
        });

        $('.deleteItems').confirm({
            title: '@Translation.GetStringValue("Confirmation")',
            content: '@Translation.GetStringValue("AreYouSure")',
            buttons: {
                 @Translation.GetStringValue("Yes"): function () {
                    var ids = $('#deleteAllItemButton').attr('data-SelectedIDs');
                    var quantity = $('#quantityToDelete').val();

                    console.log('quantity = ' + quantity);
                    console.log('maxAllowed = ' + maxAllowed);

                    $.ajax({
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        type: 'POST',
                        url: "@Url.Action("DeleteItems","Items")?listOfIDs=" + ids + '&quantityToDelete=' + quantity,
                        success: function (response) {
                            $('#deleteItemModal').modal('hide');
                            //refreshItemsTable();
                            $('#success_tic').modal('show');
                            window.location.reload();
                        },
                        error: function (err) {
                            alert('@Translation.GetStringValue("QuantityError")');
                        }
                    });

                },
                @Translation.GetStringValue("No"): function () {

                }
            },
            onContentReady: function () {
                arabicLayout();
            }
        });
    });



    function refreshItemsTable() {
        $.ajax({
            url: '@Url.Action("ItemsPartialDefault", "Home")',
            type: "POST",
            success: function (data) {
                $('#itemsPartialView').show();
                $('#itemsPartialView').html(data);
                $('html, body').animate({
                    scrollTop: $("#itemsPartialView").offset().top
                }, 2000);
                $('#assignActionContainer').show();
            }
        });
    }




    function countCheckboxes() {
        var checked = $('input.itemCheckbox:checked').length;
        console.log('Checked = ' + checked);
        if (checked > 0) {
            $('#batchDeletedItemActionSelector').attr('disabled', false);
        } else {
            $('#batchDeletedItemActionSelector').attr('disabled', true);
        }
    }

    $(document).ready(function () {
        countCheckboxes();
    });

    $(document).on('click', '.itemCheckbox', function () {
        countCheckboxes();
    });
</script>

@*Autocomplete input*@
<script type="text/javascript">

    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a chiTranslationhe autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }

    /*An array containing all the country names in the world:*/
    var locationInStock = @Html.Raw(Json.Encode(locationInStock));
    var itemDescription = @Html.Raw(Json.Encode(itemDescription));

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("locationInStock"), locationInStock);
    autocomplete(document.getElementById("description"), itemDescription);

</script>


<script>

    function arabicLayout() {
        var cookieVal = $.cookie("language");
        if (cookieVal == 'arabic') {
            $('.jconfirm-title').css('float', 'right');
            $('.jconfirm-content').css('float', 'right');
        } else {
            $('.jconfirm-title').css('float', 'left');
            $('.jconfirm-content').css('float', 'left');
        }
    }

</script>