@using Inventory.DataObjects.DTO
@using Inventory.DataObjects.EDM
@using Inventory.WebApplication.Global

@model Inventory.DataObjects.EDM.Item

@{
    ViewBag.Title = "Create";
    List<CategoryDTO> categoriesList = ViewBag.CategoriesList as List<CategoryDTO>;
    List<Supplier> suppliersList = ViewBag.SuppliersList as List<Supplier>;
    List<AvailabilityStatu> availabilityStatusList = ViewBag.AvailabilityStatusList as List<AvailabilityStatu>;
    List<ItemStatu> itemStatusList = ViewBag.ItemStatusList as List<ItemStatu>;
    List<Unit> unitList = ViewBag.UnitList as List<Unit>;
    List<string> locationInStock = ViewBag.LocationInStock as List<string>;
    List<string> itemDescription = ViewBag.ItemDescription as List<string>;
}

<link href="@Url.Content("~/assets/wizard/gsdk-bootstrap-wizard.css")" rel="stylesheet" />
<link href="@Url.Content("~/assets/wizard/demo.css")" rel="stylesheet" />

<style type="text/css">

    .wizard-card .choice .icon {
        background-color: white;
    }

    .wizard-card .choice img {
        margin: 29px;
    }

    .wizard-card .choice {
        height: 200px;
        overflow: hidden;
    }

    .select2-container .select2-selection--single {
        background-color: #fff;
        border: 1px solid #aaa;
        border-top-color: rgb(170, 170, 170);
        border-top-style: solid;
        border-top-width: 1px;
        border-right-color: rgb(170, 170, 170);
        border-right-style: solid;
        border-right-width: 1px;
        border-bottom-color: rgb(170, 170, 170);
        border-bottom-style: solid;
        border-bottom-width: 1px;
        border-left-color: rgb(170, 170, 170);
        border-left-style: solid;
        border-left-width: 1px;
        border-image-source: initial;
        border-image-slice: initial;
        border-image-width: initial;
        border-image-outset: initial;
        border-image-repeat: initial;
        border-radius: 4px;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
        border-bottom-left-radius: 4px;
    }

        .select2-container .select2-selection--single .select2-selection__arrow {
            height: 26px;
            position: absolute;
            top: 1px;
            right: 1px;
            width: 20px;
        }


            .select2-container .select2-selection--single .select2-selection__arrow b {
                border-color: #888 transparent transparent transparent;
                border-style: solid;
                border-width: 5px 4px 0 4px;
                height: 0;
                left: 50%;
                margin-left: -4px;
                margin-top: -2px;
                position: absolute;
                top: 50%;
                width: 0;
            }

        .select2-container .select2-selection--single .select2-selection__rendered {
            color: #444;
            line-height: 28px;
        }

    .select2-container .select2-results__option--highlighted[aria-selected] {
        background-color: #5897fb;
        color: white;
    }

    .select2-results__options {
        max-height: 150px;
        overflow: auto;
    }

    .select2-selection__clear {
        display: none;
    }
</style>

<div class="page-content-wrapper">
    <div class="page-content">

        @Html.Partial("_ThemeColors")

        <h1 class="page-title"> @Translation.GetStringValue("Items") </h1>
        <div class="page-bar">
            <ul class="page-breadcrumb">
                <li>
                    <a href="@Url.Action("Index","Home")">@Translation.GetStringValue("Create")</a>
                    <i class="fa fa-angle-right"></i>
                </li>
                <li>
                    <span>@Translation.GetStringValue("NewItemInStock")</span>
                </li>
            </ul>
        </div>
        @*Content starts here*@
        <div class="form-horizontal">
            <div class="wizard-container">
                <div class="card wizard-card" data-color="green" id="wizard">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        <div class="wizard-navigation">
                            <ul class="nav nav-pills">
                                <li class="active" style="width: 25%;">
                                    <a href="#Categories" data-toggle="tab">@Translation.GetStringValue("Categories")</a>
                                </li>
                                <li style="width: 25%;">
                                    <a href="#item" data-toggle="tab">@Translation.GetStringValue("Name")</a>
                                </li>
                                <li style="width: 25%;">
                                    <a href="#details" data-toggle="tab">@Translation.GetStringValue("Details")</a>
                                </li>
                            </ul>
                            <div class="moving-tab" style="width: 187.5px; transform: translate3d(0px, 0px, 0px); transition: transform 0s ease 0s;">@Translation.GetStringValue("Location")</div>
                        </div>

                        <div class="tab-content">
                            <div class="tab-pane active" id="Categories">
                                <h4 class="info-text"> @Translation.GetStringValue("WhatCategoryDoesThisItemBelongTo") </h4>
                                <div class="row">
                                    <div class="col-sm-10 col-sm-offset-1">
                                        @{
                                            foreach (CategoryDTO category in categoriesList)
                                            {
                                                <div class="col-sm-4">
                                                    <div class="choice category btn-next" data-categoryID="@category.Id" data-toggle="wizard-radio" rel="tooltip" title="" data-original-title="Select this option if @category.Name.">
                                                        <div class="icon">
                                                            <img src="@Url.Content("~/images/" + category.Picture)" style="width:50px;margin:29px;" />
                                                        </div>
                                                        <h6 class="english">@category.Name</h6>
                                                        <h6 class="arabic">@category.Name_Arabic</h6>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane" id="item">
                                <h4 class="info-text"> @Translation.GetStringValue("ItemsUnderThisCategory") </h4>
                                <div class="row">
                                    <div class="col-sm-5 col-sm-offset-1">
                                        <div class="form-group">
                                            <label>@Translation.GetStringValue("SelectFromThisList")</label>
                                            <select id="itemsInCategory" style="width:100%;" class="form-control">
                                                <option></option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <h4 class="info-text">
                                    <a id="toggleAddNewItemContainer">@Translation.GetStringValue("CouldntFindIt")</a>
                                </h4>
                                <div id="addNewItemContainer" class="row" style="display:none;">
                                    <div class="col-sm-5 col-sm-offset-1">
                                        <div class="form-group">
                                            <label>@Translation.GetStringValue("AddItHere")</label>
                                            <input id="newSearchableItem" type="text" class="form-control" placeholder="English name" />
                                            <input id="newSearchableItem_Arabic" type="text" class="form-control" placeholder="الاسم العربي" />
                                        </div>
                                    </div>
                                    <div class="col-sm-5 col-sm-offset-1">
                                        <div class="form-group">
                                            <label style="width:100%;"></label>
                                            <a id="addToSearchable" class="btn btn-success">@Translation.GetStringValue("Add")</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane" id="details">
                                <div class="row">
                                    <h4 class="info-text"> @Translation.GetStringValue("WriteDownTheFinalDetails") </h4>
                                    <div class="col-sm-12">
                                        <div class="form-horizontal">
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            <div class="form-group col-md-6">
                                                <label class="control-label col-md-2" for="Name">English Name</label>
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @id = "itemName", @class = "form-control", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group col-md-6">
                                                <label class="control-label col-md-2" for="Name">الاسم العربي</label>
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.Name_Arabic, new { htmlAttributes = new { @id = "itemName_Arabic", @class = "form-control", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.Name_Arabic, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="col-md-12">
                                                <hr />
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="AvailabilityStatusID">@Translation.GetStringValue("Availability")</label>
                                                <div class="col-md-10">
                                                    @Html.DropDownListFor(m => m.AvailabilityStatusID, new SelectList(availabilityStatusList, "Id", "Status"), new { @name = "AvailabilityStatusID", @id = "availabilityStatus", @style = "width:100%;" })
                                                    @Html.ValidationMessageFor(model => model.AvailabilityStatusID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="ItemStatusID">@Translation.GetStringValue("Status")</label>
                                                <div class="col-md-10">
                                                    @Html.DropDownListFor(m => m.ItemStatusID, new SelectList(itemStatusList, "Id", "Status"), new { @name = "ItemStatusID", @id = "itemStatusID", @style = "width:100%;" })
                                                    @Html.ValidationMessageFor(model => model.ItemStatusID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="LocationInStock">@Translation.GetStringValue("LocationInStock")</label>
                                                <div class="col-md-10">
                                                    @*@Html.EditorFor(model => model.LocationInStock, new { htmlAttributes = new { @class = "form-control" } })*@
                                                    @*@Html.ValidationMessageFor(model => model.LocationInStock, "", new { @class = "text-danger" })*@
                                                    <input list="LocationsInStock" class="form-control text-box single-line" id="LocationInStock" name="LocationInStock" type="text" value="">
                                                    <datalist id="LocationsInStock">
                                                        <option value="Laboratory – مختبر"></option>
                                                        <option value="Storage room - غرفة المخزن"></option>
                                                        <option value="Kitchen - مطبخ"></option>
                                                        <option value="Teachers room - غرفة الأساتذة"></option>
                                                        <option value="Office – مكتب"></option>
                                                        <option value="Principles office - مكتب المدير"></option>
                                                        <option value="Classroom – صف"></option>
                                                    </datalist>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="UnitID">@Translation.GetStringValue("Unit")</label>
                                                <div class="col-md-10">
                                                    @Html.DropDownListFor(m => m.UnitID, new SelectList(unitList, "Id", "Name"), new { @name = "UnitID", @id = "unitID", @style = "width:100%;" })
                                                    @Html.ValidationMessageFor(model => model.UnitID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" id="amountText" for="UnitAmount">@Translation.GetStringValue("Amount")</label>
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.UnitAmount, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.UnitAmount, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div id="quantityContainer" style="display:none;" class="form-group">
                                                <label class="control-label col-md-2" for="UnitID">@Translation.GetStringValue("HowMany")</label>
                                                <div class="col-md-10">
                                                    <input class="form-control text-box single-line valid" data-val="true" data-val-number="The field Quantity must be a number." data-val-required="Quantity is required." id="Quantity" name="Quantity" type="text" value="" aria-invalid="false">
                                                    @Html.ValidationMessageFor(model => model.UnitID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="ExpiryDate">@Translation.GetStringValue("ExpiryDate")</label>
                                                <div class="col-md-10">
                                                    <input id="expiryDate" name="ExpiryDate" style="width:100%!important;" class="form-control form-control-inline input-medium date-picker" size="16" type="text" value="">
                                                    @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="Description">@Translation.GetStringValue("Description")</label>
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div style="display:none;" class="form-group">
                                                <label class="control-label col-md-2" for="Price">@Translation.GetStringValue("Price") </label>
                                                <div class="col-md-10">
                                                    <input class="form-control text-box single-line" data-val="true" data-val-number="The field Price must be a number." id="Price" name="Price" type="number" value="">
                                                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="control-label col-md-2" for="SupplierID">@Translation.GetStringValue("Supplier")</label>
                                                <div class="col-md-10">
                                                    @Html.DropDownListFor(m => m.SupplierID, new SelectList(suppliersList, "Id", "Supplier1"), new { @name = "SupplierID", @id = "supplierID", @style = "width:100%;" })
                                                    @*@Html.EditorFor(model => model.SupplierID, new { htmlAttributes = new { @id = "SupplierID", @class = "form-control" } })*@
                                                    @Html.ValidationMessageFor(model => model.SupplierID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div style="display:none;" class="form-group">
                                                <label class="control-label col-md-2" for="CategoryID">@Translation.GetStringValue("Category")</label>
                                                <div class="col-md-10">
                                                    @Html.EditorFor(model => model.CategoryID, new { htmlAttributes = new { @id = "categoryID", @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="wizard-footer">
                            <div class="pull-right">
                                <input type="button" class="btn btn-next btn-fill btn-success btn-wd btn-sm" name="next" value="@Translation.GetStringValue("Next")">
                                <input type="submit" class="btn btn-finish btn-fill btn-success btn-wd btn-sm" name="finish" value="@Translation.GetStringValue("Create")" style="display: none;">

                            </div>
                            <div class="pull-left">
                                <input type="button" class="btn btn-previous btn-fill btn-default btn-wd btn-sm disabled" name="previous" value="@Translation.GetStringValue("Previous")">
                            </div>
                            <div class="clearfix"></div>
                        </div>

                    }
                </div>
            </div>
        </div>
        @*Content ends here*@
    </div>
</div>

<script src="@Url.Content("~/assets/wizard/jquery.bootstrap.wizard.js")" type="text/javascript"></script>
<script src="@Url.Content("~/assets/wizard/gsdk-bootstrap-wizard.js")"></script>
<script src="@Url.Content("~/assets/wizard/jquery.validate.min.js")"></script>

<script type="text/javascript">

    var categoryID = -1;

    $(document).ready(function () {

        //$("#expiryDate").datepicker("setDate", new Date());

        $('#toggleAddNewItemContainer').click(function () {
            $('#addNewItemContainer').toggle();
        });

        $('#itemsInCategory').select2({
            placeholder: "Select Item"
        });

        $('#availabilityStatus').select2();
        $('#itemStatusID').select2();
        $('#supplierID').select2();
        $('#unitID').select2();

        $('#unitID').change(function () {

            var unitValue = $(this).val();
            if (unitValue != 1) {
                $('#quantityContainer').show();
                $('#amountText').text('@Translation.GetStringValue("Scale")');
            } else {
                $('#quantityContainer').hide();
                $('#amountText').text('@Translation.GetStringValue("Amount")');
            }

        });

        $('#addToSearchable').click(function () {

            var newSearchableItem = $('#newSearchableItem').val();
            var newSearchableItem_Arabic = $('#newSearchableItem_Arabic').val();

            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                url: '@Url.Action("AddItemToSearchble", "Home")',
                data:
                {
                    itemName: newSearchableItem,
                    itemName_Arabic: newSearchableItem_Arabic,
                    categoryID: categoryID
                },
                success: function (data)
                {
                    getItemsInCategory(newSearchableItem);
                    $('#addNewItemContainer').hide();
                    console.log(data);
                },
                error: function () {
                    console.log('error');
                }
            });
        });

        $('.choice.category').click(function () {

            categoryID = $(this).attr('data-categoryID');

            $('#categoryID').val(categoryID);
            getItemsInCategory();

        });

        $('#itemsInCategory').change(function () {

            var itemName = $(this).val();
            $('#itemName').val(itemName);

            var itemName_Arabic = $(this).find(':selected').attr('data-arabicName');
            $('#itemName_Arabic').val(itemName_Arabic);

            console.log('english: ' + itemName + ' | arabic: ' + itemName_Arabic);

        });

        function getItemsInCategory(selectedItem) {

            $('#itemsInCategory').select2('destroy');
            $('#itemsInCategory').html('');

            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                url: '@Url.Action("ItemsInCategory", "Home")',
                data:
                {
                    categoryID: categoryID
                },
                success: function (data)
                {
                    console.log(data);

                    var htmlOptions = '<option></option>';

                    $.each(data, function (k, v) {
                        console.log('v.EnglishName = ' + v.EnglishName);
                        console.log('v.ArabicName = ' + v.ArabicName);
                        htmlOptions += '<option value="' + v.EnglishName + '" data-arabicName="' + v.ArabicName + '">' + v.EnglishName + ' - ' + v.ArabicName + '</option>';
                    });

                    $('#itemsInCategory').append(htmlOptions);

                    $('#itemsInCategory').select2({
                        placeholder: 'Select Item',
                        allowClear: true
                    });

                    $('#itemsInCategory').val(selectedItem).trigger('change');
                },
                error: function () {
                    console.log('error');
                }
            });
        }

    });

</script>


@{
    if (ViewBag.NewItem == true)
    {
        <script>
            $(document).ready(function () {
                $('#success_tic').modal('show');
            });
        </script>
    }
    if (ViewBag.NewItem == false)
    {
        <script>
            $(document).ready(function () {
                $('#error_result_modal').modal('show');
            });
        </script>
    }
}


@*Autocomplete input*@
<script type="text/javascript">

    function autocomplete(inp, arr) {
      /*the autocomplete function takes two arguments,
      the text field element and an array of possible autocompleted values:*/
      var currentFocus;
      /*execute a function when someone writes in the text field:*/
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          /*close any already open lists of autocompleted values*/
          closeAllLists();
          if (!val) { return false;}
          currentFocus = -1;
          /*create a DIV element that will contain the items (values):*/
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          /*append the DIV element as a child of the autocomplete container:*/
          this.parentNode.appendChild(a);
          /*for each item in the array...*/
          for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              /*create a DIV element for each matching element:*/
              b = document.createElement("DIV");
              /*make the matching letters bold:*/
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              /*insert a input field that will hold the current array item's value:*/
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
                  /*insert the value for the autocomplete text field:*/
                  inp.value = this.getElementsByTagName("input")[0].value;
                  /*close the list of autocompleted values,
                  (or any other open lists of autocompleted values:*/
                  closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            currentFocus++;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 38) { //up
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            currentFocus--;
            /*and and make the current item more visible:*/
            addActive(x);
          } else if (e.keyCode == 13) {
            /*If the ENTER key is pressed, prevent the form from being submitted,*/
            e.preventDefault();
            if (currentFocus > -1) {
              /*and simulate a click on the "active" item:*/
              if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
        /*close all autocomplete lists in the document,
        except the one passed as an argument:*/
        var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }

    /*An array containing all the country names in the world:*/
    var locationInStock = @Html.Raw(Json.Encode(locationInStock));
    var itemDescription = @Html.Raw(Json.Encode(itemDescription));

    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("LocationInStock"), locationInStock);
    autocomplete(document.getElementById("Description"), itemDescription);

</script>